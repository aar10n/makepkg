#toolchain:
#  arch: ""
#  bin: ""
#  host: ""
#  cross_prefix: ""
#  extra_programs: []

packages:
  - name: linux-headers
    url: http://dl-cdn.alpinelinux.org/alpine/edge/main/${PKGS_ARCH}/linux-headers-6.16.10-r0.apk
    build: |
      # Alpine .apk files are tar.gz archives - extract in parent dir
      cd .. && tar -xzf linux-headers-6.16.10-r0.apk
    install: |
      # Copy headers to sysroot (apk extracts to usr/include)
      cd .. && if [ -d usr/include ]; then
        cp -r usr/include/* $SYS_ROOT/usr/include/
      fi

  - name: zlib
    url: https://zlib.net/zlib-1.3.1.tar.gz
    build: |
      CFLAGS="-fPIC $CFLAGS" ./configure --prefix=/usr --static
      make AR="$AR rc" ARFLAGS=""
    install: |
      make install DESTDIR=$SYS_ROOT AR="$AR rc" ARFLAGS=""

  - name: libpng
    url: https://github.com/pnggroup/libpng/archive/refs/tags/v1.6.40.tar.gz
    env:
      - CPPFLAGS=-I${SYS_ROOT}/usr/include
      - LDFLAGS=-L${SYS_ROOT}/usr/lib
    build: |
      mkpkg::configure --enable-static --disable-shared
      make
    install: |
      mkpkg::make_install
    depends_on:
      - zlib

  # host build of file to generate magic.mgc
  - name: magic-file
    native: true
    url: http://ftp.astron.com/pub/file/file-5.45.tar.gz
    build: |
      autoreconf -f -i
      ./configure --prefix=/usr --disable-libseccomp
      make -C src
      make -C magic
    install: |
      mkpkg::write_artifact magic/magic.mgc 

  - name: file
    url: http://ftp.astron.com/pub/file/file-5.45.tar.gz
    build: |
      mkpkg::configure --enable-static --disable-shared --disable-libseccomp
      touch aclocal.m4 configure Makefile.in src/Makefile.in magic/Makefile.in config.h.in
      make -C src magic.h libmagic.la
      make -C src file LDFLAGS="-all-static"
    install: |
      mkpkg::make_install
      mkpkg::get_artifact magic-file magic.mgc
      mkpkg::install_file magic.mgc /usr/share/misc/magic.mgc
    depends_on:
      - zlib
      - magic-file

  - name: curl
    url: https://curl.se/download/curl-8.5.0.tar.gz
    build: |
      mkpkg::configure --enable-static --disable-shared --with-zlib \
        --without-ssl --without-libpsl --without-libidn2 --disable-ldap \
        --disable-rtsp --disable-manual --without-brotli

      make curl_LDFLAGS="-all-static"
    install: |
      mkpkg::make_install
    depends_on:
      - zlib

  - name: ncurses
    url: https://mirrors.kernel.org/gnu/ncurses/ncurses-6.4.tar.gz
    build: |
      mkpkg::configure \
        --without-cxx --without-cxx-binding \
        --without-ada --without-manpages --without-progs \
        --without-tests --with-termlib --enable-widec \
        --enable-static --disable-shared \
        --disable-db-install
      make
    install: |
      mkpkg::make_install
    depends_on:
      - zlib

  - name: vim
    url: https://github.com/vim/vim/archive/refs/tags/v9.1.0.tar.gz
    env:
      - CPPFLAGS=-I${SYS_ROOT}/usr/include
      - vim_cv_uname_output=Linux
      - vim_cv_uname_r_output=5.0.0
      - vim_cv_uname_m_output=x86_64
      - vim_cv_toupper_broken=no
      - vim_cv_terminfo=yes
      - vim_cv_tgetent=zero
      - vim_cv_tgetent_zero=yes
      - vim_cv_tty_group=world
      - vim_cv_tty_mode=0620
      - vim_cv_getcwd_broken=no
      - vim_cv_stat_ignores_slash=no
      - vim_cv_memmove_handles_overlap=yes
      - ac_cv_sizeof_int=4
      - ac_cv_small_wchar_t=no
    build: |
      cd src
      mkpkg::configure \
        --build=${PKGS_ARCH}-linux-gnu \
        --with-features=huge \
        --with-tlib=tinfow \
        --with-compiledby="makepkg" --disable-gui --without-x \
        --disable-netbeans --disable-channel --disable-gpm \
        --disable-nls --disable-acl --disable-sysmouse \
        --enable-multibyte
      make LDFLAGS="--static -L$SYS_ROOT/usr/lib -L$SYS_ROOT/lib" vim
    install: |
      cd src && mkpkg::make_install
    depends_on:
      - zlib
      - ncurses

  - name: readline
    url: https://mirrors.kernel.org/gnu/readline/readline-8.3.tar.gz
    env:
      - CPPFLAGS=-I${SYS_ROOT}/usr/include
      - LDFLAGS=-L${SYS_ROOT}/usr/lib
    build: |
      mkpkg::configure --enable-static --disable-shared
      make
    install: |
      mkpkg::make_install
    depends_on:
      - ncurses

  - name: sqlite3  # Requires Tcl 8.6+ on build host for autosetup configure system
    url: https://sqlite.org/2025/sqlite-autoconf-3500400.tar.gz
    env:
      - CPPFLAGS=-I${SYS_ROOT}/usr/include
      - LDFLAGS=-L${SYS_ROOT}/usr/lib -lreadline -lncursesw -ltinfow
      - CFLAGS=-DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MATH_FUNCTIONS -DSQLITE_ENABLE_COLUMN_METADATA -DSQLITE_ENABLE_DBSTAT_VTAB -DSQLITE_HAVE_ZLIB
    build: |
      mkpkg::configure \
        --enable-static --disable-shared \
        --with-readline-header=${SYS_ROOT}/usr/include/readline/readline.h \
        --with-readline-ldflags="-lreadline -lncursesw -ltinfow"
      make
    install: |
      make install DESTDIR=$SYS_ROOT INSTALL=/usr/bin/install
    depends_on:
      - zlib
      - ncurses
      - readline

  - name: brotli
    url: https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz
    build: |
      cmake -B build -S . \
        -DCMAKE_SYSTEM_NAME=Linux \
        -DCMAKE_C_COMPILER="$CC" \
        -DCMAKE_AR="$AR" \
        -DCMAKE_RANLIB="$RANLIB" \
        -DCMAKE_FIND_ROOT_PATH="$SYS_ROOT" \
        -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
        -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
        -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DBUILD_SHARED_LIBS=OFF
      cmake --build build
    install: |
      cmake --install build --prefix "$SYS_ROOT/usr"

  - name: openssl
    url: https://github.com/openssl/openssl/releases/download/openssl-3.6.0/openssl-3.6.0.tar.gz
    build: |
      ./Configure linux-${PKGS_ARCH} \
        --prefix=/usr \
        --openssldir=/etc/ssl \
        --with-zlib-include=${SYS_ROOT}/usr/include \
        --with-zlib-lib=${SYS_ROOT}/usr/lib \
        --with-brotli-include=${SYS_ROOT}/usr/include \
        --with-brotli-lib=${SYS_ROOT}/usr/lib \
        -L${SYS_ROOT}/usr/lib \
        -I${SYS_ROOT}/usr/include \
        no-shared \
        no-deprecated \
        enable-brotli \
        zlib
      make
    install: |
      mkpkg::make_install
    depends_on:
      - linux-headers
      - zlib
      - brotli

  - name: python3
    url: https://www.python.org/ftp/python/3.13.7/Python-3.13.7.tar.xz
    env:
      - CPPFLAGS=-I${SYS_ROOT}/usr/include -I${SYS_ROOT}/usr/include/ncursesw
      - LDFLAGS=-L${SYS_ROOT}/usr/lib -L${SYS_ROOT}/lib
      - PKG_CONFIG_PATH=${SYS_ROOT}/usr/lib/pkgconfig:${SYS_ROOT}/usr/share/pkgconfig
      - OPENSSL_CFLAGS=-I${SYS_ROOT}/usr/include
      - OPENSSL_LDFLAGS=-L${SYS_ROOT}/usr/lib
      - OPENSSL_LIBS=-lssl -lcrypto -lbrotlienc -lbrotlidec -lbrotlicommon -lz
    build: |
      # Cross-compilation requires a build Python interpreter
      # Use the system Python 3 (must be same major.minor version)
      BUILD_PYTHON=$(which python3)
      if [ -z "$BUILD_PYTHON" ]; then
        echo "Error: python3 not found on build system (required for cross-compilation)"
        exit 1
      fi

      mkpkg::configure \
        --build=${PKGS_ARCH}-linux-gnu \
        --with-build-python="$BUILD_PYTHON" \
        --enable-shared=no \
        --disable-test-modules \
        --disable-ipv6 \
        ac_cv_file__dev_ptmx=yes \
        ac_cv_file__dev_ptc=no

      make
    install: |
      mkpkg::make_install
      ln -sf python3 $SYS_ROOT/usr/bin/python
    depends_on:
      - linux-headers
      - zlib
      - openssl
      - readline
      - ncurses
      - sqlite3
