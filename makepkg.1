.\" Copyright (c) 2025
.\" Manual page for makepkg
.\"
.Dd January 5, 2025
.Dt MAKEPKG 1
.Os
.Sh NAME
.Nm makepkg
.Nd a generic build system for system packages
.Sh SYNOPSIS
.Nm
.Op Fl f Ar file
.Op Fl t Ar file
.Op Fl s Ar path
.Op Fl b Ar path
.Op Fl a Ar arch
.Op Fl h Ar host
.Op Fl j Ar N
.Op Fl m Ar N
.Op Fl qFnvBI
.Op Fl -clean
.Op Fl -list
.Op Fl -version
.Op Ar package ...
.Sh DESCRIPTION
The
.Nm
utility is a package build system that automates the process of downloading,
building, and installing software packages with support for dependency
resolution, cross-compilation toolchains, and concurrent builds.
.Pp
.Nm
reads package definitions from a YAML or TOML configuration file, resolves
dependencies, and builds packages in the correct order.
Each package can specify build scripts, installation scripts, and dependencies
on other packages.
The system supports environment variable substitution using
.Sy ${VAR}
syntax in most package and toolchain configuration fields.
.Pp
If no configuration file is specified,
.Nm
searches for
.Pa packages.yaml ,
.Pa packages.yml ,
or
.Pa packages.toml
in the current directory (in that order).
.Sh OPTIONS
The following options are available:
.Bl -tag -width Ds
.It Fl f Ar file , Fl -file Ar file
Read
.Ar file
as the package configuration file.
If not specified,
.Nm
auto-discovers a configuration file in the current directory.
.It Fl t Ar file , Fl -toolchain Ar file
Read
.Ar file
as the toolchain configuration file.
If not specified,
.Nm
attempts to auto-discover
.Pa toolchain.yaml ,
.Pa toolchain.yml ,
or
.Pa toolchain.toml
in the current directory.
The toolchain configuration may also be embedded in the packages
configuration file.
.It Fl s Ar path , Fl -sysroot Ar path
Use
.Ar path
as the sysroot directory when installing and building packages.
If not specified, packages will be installed to the system root
.Pq Pa / ,
after prompting for confirmation.
The sysroot path is made absolute and exported as the
.Ev SYS_ROOT
environment variable.
.It Fl b Ar path , Fl -builddir Ar path
Use
.Ar path
as the directory where packages should be built.
Defaults to
.Pa build
in the current directory.
Each package creates a subdirectory within the build directory.
.It Fl a Ar arch , Fl -arch Ar arch
Set the target architecture to
.Ar arch
(e.g., x86_64, aarch64, arm).
This overrides the architecture specified in the toolchain configuration.
The value is exported as
.Ev PKGS_ARCH .
.It Fl h Ar host , Fl -host Ar host
Set the target host triple to
.Ar host
(e.g., x86_64-linux-musl, arm-linux-gnueabihf).
This overrides the host specified in the toolchain configuration.
The value is exported as
.Ev PKGS_HOST .
.It Fl j Ar N , Fl -jobs Ar N
Set the maximum concurrency to
.Ar N
for building packages.
Defaults to 1 (sequential builds).
Packages at the same dependency level are built concurrently up to this limit.
.It Fl m Ar N , Fl -make-jobs Ar N
Set the number of jobs to
.Ar N
for each make invocation.
Defaults to 1.
This value is exported as
.Ev MAKEFLAGS
in the format
.Ql -jN .
.It Fl q , Fl -quiet
Do not log build output to standard output.
Only informational messages and the build summary are displayed.
Build output is still captured for error reporting.
.It Fl F , Fl -fail-fast
Stop building immediately when the first error occurs.
By default,
.Nm
continues building other packages after a failure.
.It Fl n , Fl -dry-run
Print what would be done without actually building packages.
Shows which packages would be downloaded, built, or skipped based on cache state.
.It Fl v , Fl -verbose
Enable verbose debug logging.
Shows detailed information about environment variable substitution,
toolchain configuration, and build environment setup.
.It Fl B , Fl -always-make
Clean then build packages, forcing a complete rebuild.
This is equivalent to running
.Nm
with
.Fl -clean
followed by a normal build.
.It Fl I , Fl -always-install
Always reinstall packages, ignoring cache state.
Even if a package is up to date, it will be reinstalled to the sysroot.
.It Fl -clean
Clean package builds instead of building them.
For each package,
.Nm
attempts to run the package's custom clean script if specified,
falls back to
.Ql make clean ,
or removes the source directory entirely.
.It Fl -list
List all package names from the configuration file and exit.
Useful for scripting and automation.
.It Fl V , Fl -version
Show version information and exit.
.El
.Sh ARGUMENTS
If one or more
.Ar package
arguments are specified, only those packages (and their dependencies) are built.
All package names must be defined in the configuration file.
If no packages are specified, all packages defined in the configuration are built.
.Sh PACKAGE CONFIGURATION FORMAT
The package configuration file may be written in YAML or TOML format.
The format is determined by the file extension
.Pq Pa .yaml , .yml , .toml
or by attempting to parse the file as both formats.
.Pp
The configuration file contains two top-level sections:
.Bl -tag -width Ds
.It Sy toolchain
Optional toolchain configuration (see
.Sx TOOLCHAIN CONFIGURATION ) .
May be omitted if toolchain settings are provided in a separate file.
.It Sy packages
An array of package definitions.
Each package must contain the following fields:
.Bl -tag -width "depends_on" -compact
.It Sy name
Unique package identifier
.It Sy url
URL to download the package source archive
.It Sy build
Shell script to compile the package
.It Sy install
Shell script to install the package
.El
.Pp
Optional package fields:
.Bl -tag -width "depends_on" -compact
.It Sy clean
Custom shell script for cleaning the package
.It Sy env
Array of environment variables in
.Ql NAME=VALUE
format
.It Sy depends_on
Array of package names this package depends on
.El
.El
.Pp
Example YAML configuration:
.Bd -literal -offset indent
toolchain:
  arch: x86_64
  host: x86_64-linux-musl
  bin: /opt/cross/bin
  cross_prefix: x86_64-linux-musl-

packages:
  - name: zlib
    url: https://zlib.net/zlib-1.3.tar.gz
    build: |
      ./configure --prefix=/usr
      make -j$(nproc)
    install: |
      make install DESTDIR=${INSTALL_ROOT}

  - name: openssl
    url: https://www.openssl.org/source/openssl-3.0.0.tar.gz
    depends_on:
      - zlib
    env:
      - CFLAGS=-O2 -g
    build: |
      ./config --prefix=/usr --openssldir=/etc/ssl
      make -j$(nproc)
    install: |
      make install DESTDIR=${INSTALL_ROOT}
    clean: |
      make distclean
.Ed
.Pp
Example TOML configuration:
.Bd -literal -offset indent
[toolchain]
arch = "x86_64"
host = "x86_64-linux-musl"
bin = "/opt/cross/bin"
cross_prefix = "x86_64-linux-musl-"

[[packages]]
name = "zlib"
url = "https://zlib.net/zlib-1.3.tar.gz"
build = """
\&./configure --prefix=/usr
make -j$(nproc)
"""
install = """
make install DESTDIR=${INSTALL_ROOT}
"""

[[packages]]
name = "openssl"
url = "https://www.openssl.org/source/openssl-3.0.0.tar.gz"
depends_on = ["zlib"]
env = ["CFLAGS=-O2 -g"]
build = """
\&./config --prefix=/usr --openssldir=/etc/ssl
make -j$(nproc)
"""
install = """
make install DESTDIR=${INSTALL_ROOT}
"""
clean = "make distclean"
.Ed
.Sh TOOLCHAIN CONFIGURATION
Toolchain settings may be specified in the packages configuration file under
the
.Sy toolchain
section, or in a separate file (specified via
.Fl t
or auto-discovered as
.Pa toolchain.yaml ,
.Pa toolchain.yml ,
or
.Pa toolchain.toml ) .
.Pp
A separate toolchain file takes precedence over the toolchain section in
the packages configuration.
Command-line flags
.Fl a
and
.Fl h
override both configuration sources.
.Pp
Toolchain configuration fields:
.Bl -tag -width "cross_prefix"
.It Sy arch
Target architecture (e.g., x86_64, aarch64, arm).
Exported as
.Ev PKGS_ARCH .
.It Sy host
Target host triple (e.g., x86_64-linux-musl).
Exported as
.Ev PKGS_HOST .
.It Sy bin
Directory containing toolchain binaries.
This directory is prepended to
.Ev PATH .
.It Sy cross_prefix
Prefix for cross-compilation tools (e.g., x86_64-linux-musl-).
Combined with
.Sy bin
to create full paths to toolchain programs.
Exported as
.Ev CROSS_PREFIX .
.It Sy extra_programs
Array of additional program names to export.
These are combined with
.Sy bin
to create environment variables.
.El
.Pp
For each standard toolchain program (ar, as, ld, nm, objcopy, objdump, ranlib,
strip, addr2line, c++filt, dlltool, elfedit, gprof, readelf, size, strings,
gcc, g++), an environment variable is created by combining
.Sy bin
and
.Sy cross_prefix
with the program name.
The environment variable name is the program name in uppercase, with hyphens
converted to underscores and plus signs converted to X.
.Pp
For example, with
.Sy bin
set to
.Pa /opt/cross/bin
and
.Sy cross_prefix
set to
.Ql x86_64-linux-musl- ,
the following environment variables are created:
.Bd -literal -offset indent
CC=/opt/cross/bin/x86_64-linux-musl-gcc
CXX=/opt/cross/bin/x86_64-linux-musl-g++
AR=/opt/cross/bin/x86_64-linux-musl-ar
LD=/opt/cross/bin/x86_64-linux-musl-ld
.Ed
.Pp
Example standalone toolchain.yaml:
.Bd -literal -offset indent
arch: aarch64
host: aarch64-linux-gnu
bin: /usr/local/cross/bin
cross_prefix: aarch64-linux-gnu-
extra_programs:
  - make
  - cmake
.Ed
.Sh ENVIRONMENT VARIABLE SUBSTITUTION
.Nm
supports environment variable substitution using the
.Sy ${VAR}
syntax in most package and toolchain configuration fields.
This is similar to shell variable expansion but uses a dedicated substitution
engine separate from the shell scripts.
Variables are expanded using
.Xr envsubst 1 Ns -like
syntax.
.Pp
The following fields support variable substitution:
.Bl -bullet -compact
.It
Package
.Sy url
field
.It
Package
.Sy build ,
.Sy install ,
and
.Sy clean
scripts
.It
Package
.Sy env
values (the part after the equals sign)
.It
Toolchain
.Sy arch ,
.Sy host ,
.Sy bin ,
and
.Sy cross_prefix
.It
Toolchain
.Sy extra_programs
entries
.El
.Pp
During package configuration substitution, the following special variables are
automatically provided:
.Bl -tag -width "FILE_DIR"
.It Ev PKG_NAME
The name of the current package being processed.
.It Ev PKG_URL
The URL of the current package (before substitution).
.It Ev FILE_DIR
The absolute path to the directory containing the package configuration file.
Useful for referencing local resources or scripts relative to the configuration.
.El
.Pp
During toolchain configuration substitution:
.Bl -tag -width "FILE_DIR"
.It Ev FILE_DIR
The absolute path to the directory containing the toolchain configuration file.
.El
.Pp
Variables are expanded before scripts are executed and before the build
environment is constructed.
Undefined variables in toolchain configuration fields cause an error.
Undefined variables in package scripts are left unexpanded as literal text.
.Pp
Note that substitution syntax
.Sy ${VAR}
is distinct from regular shell variable syntax
.Sy $VAR
or
.Sy ${VAR} .
In package scripts, both substitution forms may appear:
.Bl -bullet
.It
.Sy ${VAR}
substitution happens first, during configuration loading, using
.Nm Ap s
internal substitution engine
.It
.Sy $VAR
and
.Sy ${VAR}
are then processed by the shell when scripts execute
.El
.Pp
This means
.Sy ${PKGS_HOST}
in a build script will be substituted by
.Nm
before the script runs, while
.Sy $(nproc)
or
.Sy $HOME
will be expanded by the shell during script execution.
.Sh ENVIRONMENT VARIABLES
The following environment variables are set by
.Nm
and made available to package build and install scripts:
.Ss Core Variables
.Bl -tag -width "INSTALL_ROOT"
.It Ev PKGS_ROOT
Absolute path to the directory containing the package configuration file.
.It Ev PKGS_ARCH
Target architecture (from toolchain configuration or
.Fl a
flag).
.It Ev PKGS_HOST
Target host triple (from toolchain configuration or
.Fl h
flag).
.It Ev BUILD_DIR
Absolute path to the build directory.
.It Ev SYS_ROOT
Absolute path to the sysroot directory (if specified via
.Fl s ) .
This variable is always set, defaulting to
.Pa /
if no sysroot is specified.
.It Ev INSTALL_ROOT
Alias for
.Ev SYS_ROOT .
Provided for compatibility with packages that expect this variable name.
.It Ev MAKEFLAGS
Set to
.Ql -jN
where
.Ar N
is the value of the
.Fl m
flag.
Controls parallelism for make-based builds.
.El
.Ss Toolchain Variables
.Bl -tag -width "CROSS_PREFIX"
.It Ev CROSS_PREFIX
The cross-compilation prefix (if specified in toolchain configuration).
.It Ev CC , CXX , AR , LD , AS , NM , RANLIB , STRIP
Paths to the corresponding toolchain programs.
Variable names follow the pattern described in
.Sx TOOLCHAIN CONFIGURATION .
.El
.Ss Sysroot Variables
When a sysroot is specified, the following variables are configured:
.Bl -tag -width "PKG_CONFIG_SYSROOT_DIR"
.It Ev PKG_CONFIG_PATH
Prepended with
.Pa ${SYS_ROOT}/usr/lib/pkgconfig
to ensure pkg-config finds libraries installed in the sysroot.
.It Ev PKG_CONFIG_SYSROOT_DIR
Set to
.Ev SYS_ROOT .
.It Ev CFLAGS , CXXFLAGS
Prepended with
.Fl I Ns Ar ${SYS_ROOT}/usr/include .
.It Ev LDFLAGS
Prepended with
.Fl L Ns Ar ${SYS_ROOT}/usr/lib
and
.Fl L Ns Ar ${SYS_ROOT}/lib .
.It Ev LIBRARY_PATH , LD_LIBRARY_PATH
Include
.Pa ${SYS_ROOT}/usr/lib
and
.Pa ${SYS_ROOT}/lib .
.El
.Ss Package-Specific Variables
Environment variables specified in a package's
.Sy env
field are added to the build and install environment.
Values in
.Sy env
undergo variable substitution before being set.
.Sh CACHING AND REBUILDING
.Nm
maintains cache metadata in the build directory to avoid unnecessary rebuilds.
For each package, a cache file
.Pa makepkg.json
is stored in the package's build directory subdirectory.
.Pp
A package is rebuilt if:
.Bl -bullet
.It
The package has never been built
.It
The package URL has changed
.It
The build script has changed
.It
The install script has changed
.It
The target host has changed
.It
Dependencies have changed
.El
.Pp
A package is reinstalled (without rebuilding) if:
.Bl -bullet
.It
The build is up-to-date but the sysroot path has changed
.El
.Pp
Cache state is displayed in dry-run mode
.Pq Fl n
and when verbose logging is enabled
.Pq Fl v .
.Sh DEPENDENCY RESOLUTION
.Nm
uses topological sorting to determine the build order of packages based on
their
.Sy depends_on
declarations.
Packages are built in levels, where all packages in a level have no
dependencies on packages in later levels.
.Pp
Within a single dependency level, packages may be built concurrently
(controlled by the
.Fl j
flag).
.Pp
Circular dependencies are detected and reported as errors before any builds begin.
.Sh EXIT STATUS
.Ex -std
The
.Nm
utility exits with a non-zero status if any package fails to build,
unless errors are ignored (non-fail-fast mode).
.Sh EXAMPLES
Build all packages using auto-discovered configuration:
.Bd -literal -offset indent
$ makepkg -s /tmp/sysroot -j 4
.Ed
.Pp
Build only the
.Ql openssl
package and its dependencies:
.Bd -literal -offset indent
$ makepkg -s /tmp/sysroot openssl
.Ed
.Pp
Perform a dry run to see what would be built:
.Bd -literal -offset indent
$ makepkg -n -s /tmp/sysroot
.Ed
.Pp
Build with a specific toolchain configuration:
.Bd -literal -offset indent
$ makepkg -f packages.yaml -t arm-toolchain.yaml \\
    -s /opt/sysroot -h arm-linux-gnueabihf
.Ed
.Pp
Clean all built packages:
.Bd -literal -offset indent
$ makepkg --clean
.Ed
.Pp
Build with verbose logging for debugging:
.Bd -literal -offset indent
$ makepkg -v -s /tmp/sysroot
.Ed
.Sh SEE ALSO
.Xr bash 1 ,
.Xr make 1 ,
.Xr pkg-config 1
.Sh HISTORY
The
.Nm
utility was created in 2025.
.Sh AUTHORS
.An Aaron
.Sh BUGS
Report bugs at:
.Lk https://github.com/aar10n/makepkg
